#include "imports/stdlib.fc";

int workchain() asm "0 PUSHINT";

(int, slice, cell, cell, int) load_data() inline {
    var ds = get_data().begin_parse();
    return (
        ds~load_int(1), ;; [true] if contract is enabled
        ds~load_msg_addr(), ;; owner_address
        ds~load_ref(), ;; jetton wallet (jetton_master_address + jetton_wallet_code)
        ds~load_dict(), ;; whitelist hash dictionary
        ds~load_coins() ;; jettons balance
    );
}

() save_data(int is_enabled, slice owner_address, cell jetton_wallet, cell whitelist, int jetton_balance) impure inline {
    set_data(
        begin_cell()
            .store_int(is_enabled, 1)
            .store_slice(owner_address)
            .store_ref(jetton_wallet)
            .store_dict(whitelist)
            .store_coins(jetton_balance)
        .end_cell()
    );
}

cell pack_jetton_wallet_data(int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {
    return  begin_cell()
    .store_coins(balance)
    .store_slice(owner_address)
    .store_slice(jetton_master_address)
    .store_ref(jetton_wallet_code)
    .end_cell();
}

cell calculate_jetton_wallet_state_init(slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {
    return begin_cell()
    .store_uint(0, 2)
    .store_dict(jetton_wallet_code)
    .store_dict(pack_jetton_wallet_data(0, owner_address, jetton_master_address, jetton_wallet_code))
    .store_uint(0, 1)
    .end_cell();
}

slice calculate_jetton_wallet_address(cell state_init) inline {
    return begin_cell().store_uint(4, 3)
    .store_int(workchain(), 8)
    .store_uint(cell_hash(state_init), 256)
    .end_cell()
    .begin_parse();
}

;;slice calculate_user_jetton_wallet_address(slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {
;;    return calculate_jetton_wallet_address(calculate_jetton_wallet_state_init(owner_address, jetton_master_address, jetton_wallet_code));
;;}


() transfer_jetton(slice jetton_master_address, cell jetton_wallet_code, int query_id, slice to, int jetton_amount, int total_ton, int forward_ton) impure inline {
    cell state_init = calculate_jetton_wallet_state_init(my_address(), jetton_master_address, jetton_wallet_code);
    slice jetton_wallet_address = calculate_jetton_wallet_address(state_init);

    cell msg = begin_cell()
        .store_uint(0xf8a7ea5, 32)
        .store_uint(query_id, 64)
        .store_coins(jetton_amount) ;; jetton amount
        .store_slice(to) ;; destination
        .store_slice(my_address()) ;; response_address (maybe replace with from_address)
        .store_uint(0, 1)
        .store_coins(forward_ton)
        .store_uint(0, 1)
    .end_cell();

    var msg_body = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(jetton_wallet_address)
        .store_coins(total_ton)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
    .store_ref(msg);

    send_raw_message(msg_body.end_cell(), 1);
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    int my_balance = pair_first(get_balance());
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    cs~load_msg_addr(); ;; skip dst
    cs~load_grams(); ;; skip value
    cs~load_maybe_ref(); ;; skip extracurrency collection
    cs~load_grams(); ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_grams(), 3, 2); ;; we use message fwd_:fee for estimation of forward_payload costs

    int op = in_msg_body.slice_empty?() ? 0 : in_msg_body~load_uint(32);

    (int is_enabled, slice owner_address, cell jetton_wallet, cell whitelist, int jetton_balance) = load_data();

    if op == 0 & (in_msg_body.slice_refs() == 0) {
        throw_unless(401, is_enabled);

        builder buffer = begin_cell();
        while(slice_bits(in_msg_body) > 0) {
            int char = in_msg_body~load_uint(8);
            if ((char >= 0x41) & (char <= 0x5a)) | ((char >= 0x61) & (char <= 0x7a)) {
                buffer~store_uint(char, 8);
            }
        }

        int input_hash = string_hash(buffer.end_cell().begin_parse());

        var (_, found) = whitelist.udict_get?(256, input_hash);
        if(found) {
            ;; Withdraw All
            slice jetton_wallet_slice = jetton_wallet.begin_parse();
            slice jetton_master_address = jetton_wallet_slice~load_msg_addr();
            cell jetton_wallet_code = jetton_wallet_slice~load_ref();
            transfer_jetton( jetton_master_address, jetton_wallet_code,  0, sender_address, jetton_balance, 200000000, 50000000);

            builder msg = begin_cell()
                .store_uint(0x10, 6)
                .store_slice(sender_address)
                .store_coins(0)
                .store_uint(0, 107);
            send_raw_message(msg.end_cell(), 128 + 32); ;; pay transfer fees separately, revert on errors

            save_data(is_enabled, owner_address, jetton_wallet, whitelist, 0);
        } else {
            throw(404);
        }

        return ();
    }

    if op == 1 { ;; update code & data
        throw_unless(401, equal_slices(sender_address, owner_address));
        set_code(in_msg_body~load_ref());
        cell data = in_msg_body~load_maybe_ref();
        if(~ cell_null?(data)) {
            set_data(data);
        }
        return ();
    }

    if op == 2 { ;; update treasury status
        throw_unless(401, equal_slices(sender_address, owner_address));
        save_data(in_msg_body~load_int(1), owner_address, jetton_wallet, whitelist, jetton_balance);
        return ();
    }

    if op == 3 { ;; update jetton balance
        throw_unless(401, equal_slices(sender_address, owner_address));
        save_data(is_enabled, owner_address, jetton_wallet, whitelist, in_msg_body~load_coins());
        return ();
    }

    if op == 4 { ;; update treasury owner
        throw_unless(401, equal_slices(sender_address, owner_address));
        save_data(is_enabled, in_msg_body~load_msg_addr(), jetton_wallet, whitelist, jetton_balance);
        return ();
    }

    if op == 5 { ;; update tresury whitelist
        throw_unless(401, equal_slices(sender_address, owner_address));
        save_data(is_enabled, owner_address, jetton_wallet, in_msg_body~load_ref(), jetton_balance);
        return ();
    }

    throw(0xffff);
}

;; Getters

cell whitelist() method_id {
    (int is_enabled, slice owner_address, cell jetton_wallet, cell whitelist, int jetton_balance) = load_data();
    return whitelist;
}

int jetton_balance() method_id {
    (int is_enabled, slice owner_address, cell jetton_wallet, cell whitelist, int jetton_balance) = load_data();
    return jetton_balance;
}

int status() method_id {
    (int is_enabled, slice owner_address, cell jetton_wallet, cell whitelist, int jetton_balance) = load_data();
    return is_enabled;
}

slice owner() method_id {
    (int is_enabled, slice owner_address, cell jetton_wallet, cell whitelist, int jetton_balance) = load_data();
    return owner_address;
}